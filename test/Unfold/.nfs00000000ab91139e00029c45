void analyse2() {

  bool load = true;
  bool histogram = false;


  if (load) {

  // directory with data
  TString protocol = "file://";
  //TString protocol = "root://xrootd.rcac.purdue.edu/";
  //TString protocol = "dcap://dcache.rcac.purdue.edu:22125/pnfs/rcac.purdue.edu/data"; 
  TString dirname = "/scratch/scratch95/a/asvyatko/DY2012_testdir/rootfiles/";
  //TString dirname = "/store/user/asvyatko/DYstudy/dataAnalysis12/";

  // data
//  TFileCollection* c1 = new TFileCollection("data","data");
//  c1->Add(protocol+dirname+"May10ReReco"+"/*.root");
//  c1->Add(protocol+dirname+"Aug05ReReco"+"/*.root");
//  c1->Add(protocol+dirname+"PromptReco_v4"+"/*.root");
//  c1->Add(protocol+dirname+"Run2011B"+"/*.root");
//  c1->Add(protocol+dirname+"PromptReco_v6"+"/*.root");
//  c1->SetDefaultTreeName("recoTree/DiMuonTree");

  // DY
  TFileCollection* c2 = new TFileCollection("DY","DY");
  c2->Add(protocol+dirname+"DYM1020"+"/*.root");
  c2->Add(protocol+dirname+"DYM20"+"/*.root");

  // QCD
//  TFileCollection* c3 = new TFileCollection("QCD","QCD");
//  c3->Add(protocol+dirname+"QCD15to20"+"/*.root");
//  c3->Add(protocol+dirname+"QCD20to30"+"/*.root");
//  c3->Add(protocol+dirname+"QCD30to50"+"/*.root");
//  c3->Add(protocol+dirname+"QCD50to80"+"/*.root");
//  c3->Add(protocol+dirname+"QCD80to120"+"/*.root");
//  c3->Add(protocol+dirname+"QCD120to150"+"/*.root");
//  c3->Add(protocol+dirname+"QCD150"+"/*.root");

  // tt
//  TFileCollection* c4 = new TFileCollection("TT","TT");
// c4->Add(protocol+dirname+"ttbar"+"/*.root");

  // tau tau
//  TFileCollection* c5 = new TFileCollection("TAU","TAU");
//  c5->Add(protocol+dirname+"DYtautau1020"+"/*.root");
//  c5->Add(protocol+dirname+"DYtautau20"+"/*.root");

  // EWK
//  TFileCollection* c6 = new TFileCollection("EWK","EWK");
//  c6->Add(protocol+dirname+"Wmunu"+"/*.root");
//  c6->Add(protocol+dirname+"Wtaunu"+"/*.root");

  // diboson
//  TFileCollection* c7 = new TFileCollection("DIBOSON","DIBOSON");
//  c7->Add(protocol+dirname+"WZ"+"/*.root");
//  c7->Add(protocol+dirname+"ZZ"+"/*.root");
//  c7->Add(protocol+dirname+"WW"+"/*.root");

  TProof* p = TProof::Open(""); // set number of works to 2:  TProof::Open("//lite:///?workers=2");
//  p->RegisterDataSet("DATA", c1,"OV");
  p->RegisterDataSet("DY", c2,"OV");
//  p->RegisterDataSet("QCD", c3,"OV");
//  p->RegisterDataSet("TT", c4,"OV");
//  p->RegisterDataSet("TAU", c5,"OV");
//  p->RegisterDataSet("EWK", c6,"OV");
//  p->RegisterDataSet("DIBOSON", c7,"OV");

//  cout << "Show data sets" << endl;
  p->ShowDataSets();

  gROOT->Time();
  p->SetParameter("PROOF_LookupOpt", "all"); 
//  p->Process("DATA#/recoTree/DiMuonTree","EventSelector.C+");
  p->Process("DY#/recoTree/DiMuonTree","EventSelector.C+");
//  p->Process("QCD#/recoTree/DiMuonTree","EventSelector.C+");
//  p->Process("TT#/recoTree/DiMuonTree","EventSelector.C+");
//  p->Process("TAU#/recoTree/DiMuonTree","EventSelector.C+");
//  p->Process("EWK#/recoTree/DiMuonTree","EventSelector.C+");
//  p->Process("DIBOSON#/recoTree/DiMuonTree","EventSelector.C+");
  }

  if (histogram) { 
 // plot results
  plot("invm");
  plot("rap");
//  plot("");

//  plot2D("rap_M");
//  plot2D("rap_pt");
  //2D sliced
  const int nslices = 6;
  double slices[nslices+1] = {20,30,45,60,120,200,1500};
  plot2DSlices("absrap",nslices,slices);
//  plot2DSlices("iso",nslices,slices);
/*
  //trigger studies
  p->Process("DY#/recoTree/DiMuonTree","TriggerSelector.C+");
  p->Process("QCD#/recoTree/DiMuonTree","TriggerSelector.C+");
  p->Process("TT#/recoTree/DiMuonTree","TriggerSelector.C+");
  p->Process("TAU#/recoTree/DiMuonTree","TriggerSelector.C+");
  p->Process("EWK#/recoTree/DiMuonTree","TriggerSelector.C+");
  p->Process("DIBOSON#/recoTree/DiMuonTree","TriggerSelector.C+");
*/
  }

}

void plot(char* h) {

    TFile f1("DATA.root", "read");
    TH1D* hdata = (TH1D*)f1.Get(h);
    hdata->SetDirectory(0);

    TFile f2("DY.root", "read");
    TH1D* hsignal = (TH1D*)f2.Get(h);
    hsignal->SetDirectory(0);

    TFile f3("QCD.root", "read");
    TH1D* hqcd = (TH1D*)f3.Get(h);
    hqcd->SetDirectory(0);

    TFile f4("TT.root", "read");
    TH1D* httbar = (TH1D*)f4.Get(h);
    httbar->SetDirectory(0);
    
    TFile f5("TAU.root", "read");
    TH1D* hZtautau = (TH1D*)f5.Get(h);
    hZtautau->SetDirectory(0);
    
    TFile f6("EWK.root", "read");
    TH1D* hWleptonnu = (TH1D*)f6.Get(h);
    hWleptonnu->SetDirectory(0);

    TFile f7("DIBOSON.root", "read");
    TH1D* hDibosons = (TH1D*)f7.Get(h);
    hDibosons->SetDirectory(0);

    gStyle->SetOptStat(0);
    gStyle->SetPalette(1);
    gROOT->ProcessLine(".L ./setTDRStyle.C");
    setTDRStyle();
    gROOT->SetStyle("tdrStyle");
    gROOT->ForceStyle(true);

    // signal
    hsignal->SetLineColor(kOrange);
    hsignal->SetFillColor(kOrange);

    // qcd
    hqcd->SetLineColor(9);
    hqcd->SetFillColor(9);

    // tt
    httbar->SetLineColor(kRed+2);
    httbar->SetFillColor(kRed+2);

    // tau
    hZtautau->SetLineColor(kGreen);
    hZtautau->SetFillColor(kGreen);

    // EWK
    hWleptonnu->SetLineColor(38);
    hWleptonnu->SetFillColor(38);

    //hupsilon->SetLineColor(51);
    //hupsilon->SetFillColor(51);

    // diboson
    hDibosons->SetLineColor(40);
    hDibosons->SetFillColor(40);


    //scaling
    const double ttbarNorm = httbar->Integral()*157./94.7;
    const double WleptonnuNorm = hWleptonnu->Integral();
    const double ZtautauNorm = hZtautau->Integral();
    const double qcdNorm = hqcd->Integral();
    const double dibosonNorm = hDibosons->Integral();
    const double signalNorm = hsignal->Integral();
    const double fullMCintegral = ttbarNorm+WleptonnuNorm+ZtautauNorm+qcdNorm+dibosonNorm+signalNorm;

//SHORTCUT DRAW
/*
    TFile *fshortcut = new TFile("invmass_HLT_Mu13_Mu8.root","r");
    fshortcut->cd();
    TH1D* hdata_shortcut1 = (TH1D*)gDirectory->Get("h1_HLT_Double_PromptReco_v4");
    TH1D* hdata_shortcut2 = (TH1D*)gDirectory->Get("h1_HLT_Double_PromptReco_v6");
    TH1D* hdata_shortcut3 = (TH1D*)gDirectory->Get("h1_HLT_Double_Aug05ReReco");
    TH1D* hdata_shortcut4 = (TH1D*)gDirectory->Get("h1_HLT_Double_Run2011B");
    TH1D* hdata_shortcut = (TH1D*)hdata_shortcut1->Clone();
    hdata_shortcut->Add(hdata_shortcut2);
    hdata_shortcut->Add(hdata_shortcut3);
    hdata_shortcut->Add(hdata_shortcut4);
*/    
    httbar->Scale(157./94.7*hdata->Integral()/fullMCintegral);
    hWleptonnu->Scale(hdata->Integral()/fullMCintegral);
    hZtautau->Scale(hdata->Integral()/fullMCintegral);
    hqcd->Scale(hdata->Integral()/fullMCintegral);
    hsignal->Scale(hdata->Integral()/fullMCintegral);
    hDibosons->Scale(hdata->Integral()/fullMCintegral);

    // mc
    TH1D* hmc = (TH1D*)hsignal->Clone();
    hmc->Add(hqcd);
    //hmc->Add(hupsilon);
    hmc->Add(httbar);
    hmc->Add(hZtautau);
    hmc->Add(hWleptonnu);
    hmc->Add(hDibosons);

    //set up ratio check
    TH1D* hratio = (TH1D*)httbar->Clone();
    FindRatio(hratio,hdata,hmc);

    THStack* hstack = new THStack("hstack", "hstack");
    //hstack->Add(hupsilon);
    hstack->Add(hWleptonnu);
    hstack->Add(hDibosons);
    hstack->Add(httbar);
    hstack->Add(hZtautau);
    hstack->Add(hqcd);
    hstack->Add(hsignal);

    std::ostringstream pprint;
    //pprint.str("");
    //pprint<<Lumi;
    //string lumiLabel = pprint.str();

    TCanvas *c1 = new TCanvas(TString(h), TString(h), 800, 840);
    c1->Draw();
    c1->cd();
    //TPad *p1 = new TPad("p1", "",0.0,0.25,1.0,1.0,0,0,0);
    //p1->Draw();
    //p1->cd();
    //p1->SetBottomMargin(0.01);
    c1->SetLogy();
    c1->SetLogx();

    hstack->SetMaximum(2.0*hdata->GetMaximum());
    hstack->SetMinimum(1.0*10E-2);
    //hstack->SetTitle("CMS at 7TeV, Lumi = "+TString(lumiLabel)+" pb^{-1}");
    hstack->Draw("");
    hstack->GetXaxis()->SetMoreLogLabels();
    if (TString(h) == "invm") hstack->GetXaxis()->SetTitle("Dimuon Invariant Mass");
    if (TString(h) == "rap")  hstack->GetXaxis()->SetTitle("Dimuon Rapidity");
    //if (TString(h) == "pt")  hstack->GetXaxis()->SetTitle("p_{T} [GeV]");
    //if (TString(h) == "eta")  hstack->GetXaxis()->SetTitle("|#eta|");

    hstack->GetYaxis()->SetTitle("Number of Events");
    hstack->Draw("");

    THStack* hstack2 = new THStack("stack2","stack2");
    //hupsilon->SetMarkerSize(0);
    httbar->SetMarkerSize(0);
    hWleptonnu->SetMarkerSize(0);
    hZtautau->SetMarkerSize(0);
    hqcd->SetMarkerSize(0);
    hsignal->SetMarkerSize(0);
    hDibosons->SetMarkerSize(0);
    //hstack2->Add(hupsilon);
    hstack2->Add(httbar);
    hstack2->Add(hWleptonnu);
    hstack2->Add(hDibosons);
    hstack2->Add(hZtautau);
    hstack2->Add(hqcd);
    hstack2->Add(hsignal);
    hstack2->Draw("Esame");

    hdata->SetMarkerStyle(20);
    hdata->GetXaxis()->SetMoreLogLabels();
    hdata->Draw("epsame");

//SHORTCUT DRAW
/*    TFile *fshortcut = new TFile("invmass_HLT_Mu13_Mu8.root","r");
    fshortcut->cd();
    TH1D* hdata_shortcut1 = (TH1D*)gDirectory->Get("h1_HLT_Double_PromptReco_v4");
    TH1D* hdata_shortcut2 = (TH1D*)gDirectory->Get("h1_HLT_Double_PromptReco_v6");
    TH1D* hdata_shortcut3 = (TH1D*)gDirectory->Get("h1_HLT_Double_Aug05ReReco");
    TH1D* hdata_shortcut4 = (TH1D*)gDirectory->Get("h1_HLT_Double_Run2011B");
    TH1D* hdata_shortcut = (TH1D*)hdata_shortcut1->Clone();
    hdata_shortcut->Add(hdata_shortcut2);
    hdata_shortcut->Add(hdata_shortcut3);
    hdata_shortcut->Add(hdata_shortcut4);
*/    hdata->Draw("epsame");

    TPaveText *pt = new TPaveText(0.30,0.75,0.45,0.90,"brNDC");
    pt->SetFillColor(0);
//   pt->SetTextFont(72);
    pt->SetTextSize(0.040);
    pt->SetBorderSize(0);
    pt->SetTextAlign(12);
    pt->AddText("CMS Preliminary, #intLdt = 15 pb^{-1}");

/*    gStyle->SetOptTitle(0);
    TPad *p2 = new TPad("p2", "",0.0,0.0,1.0,0.24,0,0,0);
    c1->cd();
    p2->Draw();
    p2->cd();
    p2->SetLogx();
    p2->SetTopMargin(0.007);
    p2->SetBottomMargin(0.35);
    p2->SetTickx();
    hratio->GetYaxis()->SetTitle("R_{Data/MC}");
    hratio->SetStats(kFALSE);
    hratio->GetYaxis()->SetTitleOffset(0.29);
    hratio->GetXaxis()->SetTitle("M_{#mu#mu} [GeV]");
    hratio->GetYaxis()->SetTitleSize(0.15);
    hratio->GetXaxis()->SetTitleSize(0.15);
    hratio->GetYaxis()->SetLabelSize(0.10);
    hratio->GetXaxis()->SetLabelSize(0.15);
    hratio->SetMarkerSize(1.3);
    hratio->SetMaximum(3.0);
    hratio->SetMinimum(-0.5);
    hratio->SetMarkerStyle(20);
    hratio->Draw("ep");
*/
    //add to stack
    TH1D* hstack4fit = (TH1D*)hsignal->Clone();
    //hstack->Add(hupsilon);
    hstack4fit->Add(hWleptonnu);
    hstack4fit->Add(hDibosons);
    hstack4fit->Add(httbar);
    hstack4fit->Add(hZtautau);
    hstack4fit->Add(hqcd);

//save important histograms
    TFile* f = new TFile("stack4fit_analyse"+TString(h)+".root","recreate");
    f->cd();
    hstack4fit->SetName("stack4fit");
    hstack4fit->Write();
    hsignal->SetName("signal");
    hsignal->Write();
    hqcd->SetName("qcd");
    hqcd->Write();
    hZtautau->SetName("Ztautau");
    hZtautau->Write();
    hWleptonnu->SetName("Wleptonnu");
    hWleptonnu->Write();
    hDibosons->SetName("dibosons");
    hDibosons->Write();
    httbar->SetName("ttbar");
    httbar->Write();
    hdata->SetName("data");
    hdata->Write();
    hratio->SetName("ratio");
    hratio->Write();
    f->Close();

    ostringstream tmpstrm;
    TLegend *legend = new TLegend(0.75, 0.60, 0.93, 0.90);
    tmpstrm.str("");
    tmpstrm << "DATA   " << hdata->Integral();
    legend->AddEntry(hdata, tmpstrm.str().c_str(), "PL");
    tmpstrm.str("");
    tmpstrm << "DY#rightarrow#mu#mu   " << Round(hsignal->Integral());
    legend->AddEntry(hsignal, tmpstrm.str().c_str(), "F");
    tmpstrm.str("");
    tmpstrm << "QCD#rightarrow#mu+X   " << Round(hqcd->Integral());
    legend->AddEntry(hqcd, tmpstrm.str().c_str(), "F");
    tmpstrm.str("");
    tmpstrm << "Z#rightarrow#tau#tau   " << Round(hZtautau->Integral());
    legend->AddEntry(hZtautau, tmpstrm.str().c_str(), "F");
    tmpstrm.str("");
    tmpstrm << "t#bar{t}   " << Round(httbar->Integral());
    legend->AddEntry(httbar, tmpstrm.str().c_str(), "F");
    tmpstrm.str("");
    tmpstrm << "W#rightarrow l#nu   " << Round(hWleptonnu->Integral());
    legend->AddEntry(hWleptonnu, tmpstrm.str().c_str(), "F");
    tmpstrm.str("");
    tmpstrm << "Dibosons   " << Round(hDibosons->Integral());
    legend->AddEntry(hDibosons, tmpstrm.str().c_str(), "F");
    tmpstrm.str("");
//    tmpstrm << "Upsilon" << Round(hupsilon->Integral());
//    legend->AddEntry(hupsilon, tmpstrm.str().c_str(), "F");
//    tmpstrm.str("");

    legend->SetFillColor(0);
    legend->Draw("0");

    c1->Print(TString(h)+".pdf");
}

void plot2D(char* h) {

    TFile f1("DATA.root", "read");
    TH2D* hdata = (TH2D*)f1.Get(h);
    hdata->SetDirectory(0);

    TFile f2("DY.root", "read");
    TH2D* hsignal = (TH2D*)f2.Get(h);
    hsignal->SetDirectory(0);

    TFile f3("QCD.root", "read");
    TH2D* hqcd = (TH2D*)f3.Get(h);
    hqcd->SetDirectory(0);

    TFile f4("TT.root", "read");
    TH2D* httbar = (TH2D*)f4.Get(h);
    httbar->SetDirectory(0);
    
    TFile f5("TAU.root", "read");
    TH2D* hZtautau = (TH2D*)f5.Get(h);
    hZtautau->SetDirectory(0);
    
    TFile f6("EWK.root", "read");
    TH2D* hWleptonnu = (TH2D*)f6.Get(h);
    hWleptonnu->SetDirectory(0);

    TFile f7("DIBOSON.root", "read");
    TH2D* hDibosons = (TH2D*)f7.Get(h);
    hDibosons->SetDirectory(0);

    gStyle->SetOptStat(0);
    gROOT->ProcessLine(".L ./setTDRStyle.C");
    setTDRStyle();
    gROOT->SetStyle("tdrStyle");
    gROOT->ForceStyle(true);

    // signal
    hsignal->SetLineColor(kOrange);
    hsignal->SetFillColor(kOrange);

    // qcd
    hqcd->SetLineColor(9);
    hqcd->SetFillColor(9);

    // tt
    httbar->SetLineColor(kRed+2);
    httbar->SetFillColor(kRed+2);

    // tau
    hZtautau->SetLineColor(kGreen);
    hZtautau->SetFillColor(kGreen);

    // EWK
    hWleptonnu->SetLineColor(38);
    hWleptonnu->SetFillColor(38);

    //hupsilon->SetLineColor(51);
    //hupsilon->SetFillColor(51);

    // diboson
    hDibosons->SetLineColor(40);
    hDibosons->SetFillColor(40);


    //scaling
    const double ttbarNorm = httbar->Integral()*157./94.7;
    const double WleptonnuNorm = hWleptonnu->Integral();
    const double ZtautauNorm = hZtautau->Integral();
    const double qcdNorm = hqcd->Integral();
    const double dibosonNorm = hDibosons->Integral();
    const double signalNorm = hsignal->Integral();
    const double fullMCintegral = ttbarNorm+WleptonnuNorm+ZtautauNorm+qcdNorm+dibosonNorm+signalNorm;

    httbar->Scale(157./94.7*hdata->Integral()/fullMCintegral);
    hWleptonnu->Scale(hdata->Integral()/fullMCintegral);
    hZtautau->Scale(hdata->Integral()/fullMCintegral);
    hqcd->Scale(hdata->Integral()/fullMCintegral);
    hsignal->Scale(hdata->Integral()/fullMCintegral);
    hDibosons->Scale(hdata->Integral()/fullMCintegral);

    // mc
    TH2D* hmc = (TH2D*)hsignal->Clone();
    hmc->Add(hqcd);
    //hmc->Add(hupsilon);
    hmc->Add(httbar);
    hmc->Add(hZtautau);
    hmc->Add(hWleptonnu);
    hmc->Add(hDibosons);

    //set up ratio check
    //TH1D* hratio = (TH1D*)httbar->Clone();
    //FindRatio(hratio,hdata,hmc);

    THStack* hstack = new THStack("hstack", "hstack");
    //hstack->Add(hupsilon);
    hstack->Add(hWleptonnu);
    hstack->Add(hDibosons);
    hstack->Add(httbar);
    hstack->Add(hZtautau);
    hstack->Add(hqcd);
    hstack->Add(hsignal);

    std::ostringstream pprint;
    //pprint.str("");
    //pprint<<Lumi;
    //string lumiLabel = pprint.str();

    TCanvas *c1 = new TCanvas(TString(h), TString(h), 800, 840);
    c1->Draw();
    //TPad *p1 = new TPad("p1", "",0.0,0.25,1.0,1.0,0,0,0);
    //p1->Draw();
    //p1->cd();
    //p1->SetBottomMargin(0.01);
    c1->cd();
    c1->SetLogy();
    //c1->SetLogx();

    hstack->SetMaximum(2.0*hdata->GetMaximum());
    hstack->SetMinimum(1.0*10E-2);
    //hstack->SetTitle("CMS at 7TeV, Lumi = "+TString(lumiLabel)+" pb^{-1}");
    hstack->Draw("");
    hstack->GetXaxis()->SetMoreLogLabels();
    hstack->GetXaxis()->SetTitle("Rapidity");
    if (TString(h) == "rap_M") hstack->GetYaxis()->SetTitle("Dimuon Invariant Mass [GeV]");
    if (TString(h) == "rap_pt") hstack->GetYaxis()->SetTitle("p_{T} [GeV]");
    gStyle->SetPalette(1);
    hstack->Draw("COLZ");

/*    hdata->SetMarkerStyle(20);
    hdata->GetXaxis()->SetMoreLogLabels();
    hdata->Draw("epsame");
*/

    TPaveText *pt = new TPaveText(0.30,0.75,0.45,0.90,"brNDC");
    pt->SetFillColor(0);
//   pt->SetTextFont(72);
    pt->SetTextSize(0.040);
    pt->SetBorderSize(0);
    pt->SetTextAlign(12);
    pt->AddText("CMS Preliminary, #intLdt = 15 pb^{-1}");

/*
    gStyle->SetOptTitle(0);
    TPad *p2 = new TPad("p2", "",0.0,0.0,1.0,0.24,0,0,0);
    c1->cd();
    p2->Draw();
    p2->cd();
    p2->SetLogx();
    p2->SetTopMargin(0.007);
    p2->SetBottomMargin(0.35);
    p2->SetTickx();
    hratio->GetYaxis()->SetTitle("R_{Data/MC}");
    hratio->SetStats(kFALSE);
    hratio->GetYaxis()->SetTitleOffset(0.29);
    hratio->GetXaxis()->SetTitle("M_{#mu#mu} [GeV]");
    hratio->GetYaxis()->SetTitleSize(0.15);
    hratio->GetXaxis()->SetTitleSize(0.15);
    hratio->GetYaxis()->SetLabelSize(0.10);
    hratio->GetXaxis()->SetLabelSize(0.15);
    hratio->SetMarkerSize(1.3);
    hratio->SetMaximum(3.0);
    hratio->SetMinimum(-0.5);
    hratio->SetMarkerStyle(20);
    hratio->Draw("ep");
*/

    //add to stack
    TH1D* hstack4fit = (TH1D*)hsignal->Clone();
    //hstack->Add(hupsilon);
    hstack4fit->Add(hWleptonnu);
    hstack4fit->Add(hDibosons);
    hstack4fit->Add(httbar);
    hstack4fit->Add(hZtautau);
    hstack4fit->Add(hqcd);

//save important histograms
    TFile* f = new TFile("stack4fit_analyse"+TString(h)+".root","recreate");
    f->cd();
    hstack4fit->SetName("stack4fit");
    hstack4fit->Write();
    hsignal->SetName("signal");
    hsignal->Write();
    hqcd->SetName("qcd");
    hqcd->Write();
    hZtautau->SetName("Ztautau");
    hZtautau->Write();
    hWleptonnu->SetName("Wleptonnu");
    hWleptonnu->Write();
    hDibosons->SetName("dibosons");
    hDibosons->Write();
    httbar->SetName("ttbar");
    httbar->Write();
    hdata->SetName("data");
    hdata->Write();
//    hratio->SetName("ratio");
//    hratio->Write();
    f->Close();

    ostringstream tmpstrm;
    TLegend *legend = new TLegend(0.75, 0.60, 0.93, 0.90);
    tmpstrm.str("");
    tmpstrm << "DATA   " << hdata->Integral();
    legend->AddEntry(hdata, tmpstrm.str().c_str(), "PL");
    tmpstrm.str("");
    tmpstrm << "DY#rightarrow#mu#mu   " << Round(hsignal->Integral());
    legend->AddEntry(hsignal, tmpstrm.str().c_str(), "F");
    tmpstrm.str("");
    tmpstrm << "QCD#rightarrow#mu+X   " << Round(hqcd->Integral());
    legend->AddEntry(hqcd, tmpstrm.str().c_str(), "F");
    tmpstrm.str("");
    tmpstrm << "Z#rightarrow#tau#tau   " << Round(hZtautau->Integral());
    legend->AddEntry(hZtautau, tmpstrm.str().c_str(), "F");
    tmpstrm.str("");
    tmpstrm << "t#bar{t}   " << Round(httbar->Integral());
    legend->AddEntry(httbar, tmpstrm.str().c_str(), "F");
    tmpstrm.str("");
    tmpstrm << "W#rightarrow l#nu   " << Round(hWleptonnu->Integral());
    legend->AddEntry(hWleptonnu, tmpstrm.str().c_str(), "F");
    tmpstrm.str("");
    tmpstrm << "Dibosons   " << Round(hDibosons->Integral());
    legend->AddEntry(hDibosons, tmpstrm.str().c_str(), "F");
    tmpstrm.str("");
//    tmpstrm << "Upsilon" << Round(hupsilon->Integral());
//    legend->AddEntry(hupsilon, tmpstrm.str().c_str(), "F");
//    tmpstrm.str("");

    legend->SetFillColor(0);
    legend->Draw("0");

    c1->Print(TString(h)+"2D.pdf");
}

void plot2DSlices(char* h, const int nedges, double* edges) {

    const double ttbarNorm = 0;
    const double WleptonnuNorm = 0;
    const double ZtautauNorm = 0;
    const double qcdNorm = 0;
    const double dibosonNorm = 0;
    const double signalNorm = 0;
    const double fullMCintegral = 0;
    const double fullDataintegral = 0;

  for (int i = 0; i < nedges; i++) {
    //convert int to string  double to string
    std::ostringstream pprint;
    pprint.str("");
    pprint<<edges[i];
    if (i<nedges-1) pprint<<edges[i+1];
    string label = pprint.str();

    cout << "Accessing " << TString(h)+TString(label) << endl;
    TFile f1("DATA.root", "read");
    TH1D* hdata = (TH1D*)f1.Get(TString(h)+TString(label));
    hdata->SetDirectory(0);
    TFile f2("DY.root", "read");
    TH1D* hsignal = (TH1D*)f2.Get(TString(h)+TString(label));
    hsignal->SetDirectory(0);
    TFile f3("QCD.root", "read");
    TH1D* hqcd = (TH1D*)f3.Get(TString(h)+TString(label));
    hqcd->SetDirectory(0);
    TFile f4("TT.root", "read");
    TH1D* httbar = (TH1D*)f4.Get(TString(h)+TString(label));
    httbar->SetDirectory(0);
    TFile f5("TAU.root", "read");
    TH1D* hZtautau = (TH1D*)f5.Get(TString(h)+TString(label));
    hZtautau->SetDirectory(0);
    TFile f6("EWK.root", "read");
    TH1D* hWleptonnu = (TH1D*)f6.Get(TString(h)+TString(label));
    hWleptonnu->SetDirectory(0);
    TFile f7("DIBOSON.root", "read");
    TH1D* hDibosons = (TH1D*)f7.Get(TString(h)+TString(label));
    hDibosons->SetDirectory(0);

    gStyle->SetOptStat(0);
    gROOT->ProcessLine(".L ./setTDRStyle.C");
    setTDRStyle();
    gROOT->SetStyle("tdrStyle");
    gROOT->ForceStyle(true);
    // signal
    hsignal->SetLineColor(kOrange);
    hsignal->SetFillColor(kOrange);
    // qcd
    hqcd->SetLineColor(9);
    hqcd->SetFillColor(9);
    // tt
    httbar->SetLineColor(kRed+2);
    httbar->SetFillColor(kRed+2);
    // tau
    hZtautau->SetLineColor(kGreen);
    hZtautau->SetFillColor(kGreen);
    // EWK
    hWleptonnu->SetLineColor(38);
    hWleptonnu->SetFillColor(38);
    //hupsilon->SetLineColor(51);
    //hupsilon->SetFillColor(51);
    // diboson
    hDibosons->SetLineColor(40);
    hDibosons->SetFillColor(40);

    //scaling
    ttbarNorm += httbar->Integral()*157./94.7;
    WleptonnuNorm += hWleptonnu->Integral();
    ZtautauNorm += hZtautau->Integral();
    qcdNorm += hqcd->Integral();
    dibosonNorm += hDibosons->Integral();
    signalNorm += hsignal->Integral();
    fullMCintegral += ttbarNorm+WleptonnuNorm+ZtautauNorm+qcdNorm+dibosonNorm+signalNorm;
    fullDataintegral += hdata->Integral();

} //end norm loop

  for (int i = 0; i < nedges; i++) {
    //convert int to string  double to string
    std::ostringstream pprint;
    pprint.str("");
    pprint<<edges[i];
    if (i<nedges-1) pprint<<edges[i+1];
    string label = pprint.str();

    cout << "Accessing " << TString(h)+TString(label) << endl;
    TFile f1("DATA.root", "read");
    TH1D* hdata = (TH1D*)f1.Get(TString(h)+TString(label));
    hdata->SetDirectory(0);
    TFile f2("DY.root", "read");
    TH1D* hsignal = (TH1D*)f2.Get(TString(h)+TString(label));
    hsignal->SetDirectory(0);
    TFile f3("QCD.root", "read");
    TH1D* hqcd = (TH1D*)f3.Get(TString(h)+TString(label));
    hqcd->SetDirectory(0);
    TFile f4("TT.root", "read");
    TH1D* httbar = (TH1D*)f4.Get(TString(h)+TString(label));
    httbar->SetDirectory(0);
    TFile f5("TAU.root", "read");
    TH1D* hZtautau = (TH1D*)f5.Get(TString(h)+TString(label));
    hZtautau->SetDirectory(0);
    TFile f6("EWK.root", "read");
    TH1D* hWleptonnu = (TH1D*)f6.Get(TString(h)+TString(label));
    hWleptonnu->SetDirectory(0);
    TFile f7("DIBOSON.root", "read");
    TH1D* hDibosons = (TH1D*)f7.Get(TString(h)+TString(label));
    hDibosons->SetDirectory(0);

    gStyle->SetOptStat(0);
    gROOT->ProcessLine(".L ./setTDRStyle.C");
    setTDRStyle();
    gROOT->SetStyle("tdrStyle");
    gROOT->ForceStyle(true);
    // signal
    hsignal->SetLineColor(kOrange);
    hsignal->SetFillColor(kOrange);
    // qcd
    hqcd->SetLineColor(9);
    hqcd->SetFillColor(9);
    // tt
    httbar->SetLineColor(kRed+2);
    httbar->SetFillColor(kRed+2);
    // tau
    hZtautau->SetLineColor(kGreen);
    hZtautau->SetFillColor(kGreen);
    // EWK
    hWleptonnu->SetLineColor(38);
    hWleptonnu->SetFillColor(38);
    //hupsilon->SetLineColor(51);
    //hupsilon->SetFillColor(51);
    // diboson
    hDibosons->SetLineColor(40);
    hDibosons->SetFillColor(40);

    //scaling
    const double ttbarNorm = httbar->Integral()*157./94.7;
    const double WleptonnuNorm = hWleptonnu->Integral();
    const double ZtautauNorm = hZtautau->Integral();
    const double qcdNorm = hqcd->Integral();
    const double dibosonNorm = hDibosons->Integral();
    const double signalNorm = hsignal->Integral();
    const double fullMCintegral = ttbarNorm+WleptonnuNorm+ZtautauNorm+qcdNorm+dibosonNorm+signalNorm;
    const double fullDataintegral = hdata->Integral(); 

    //FIXME decide wheather you want to scale    
    httbar->Scale(157./94.7*fullDataintegral/fullMCintegral);
    hWleptonnu->Scale(fullDataintegral/fullMCintegral);
    hZtautau->Scale(fullDataintegral/fullMCintegral);
    hqcd->Scale(fullDataintegral/fullMCintegral);
    hsignal->Scale(fullDataintegral/fullMCintegral);
    hDibosons->Scale(fullDataintegral/fullMCintegral);

    // mc
    TH1D* hmc = (TH1D*)hsignal->Clone();
    hmc->Add(hqcd);
    //hmc->Add(hupsilon);
    hmc->Add(httbar);
    hmc->Add(hZtautau);
    hmc->Add(hWleptonnu);
    hmc->Add(hDibosons);

    //set up ratio check
    TH1D* hratio = (TH1D*)httbar->Clone();
    FindRatio(hratio,hdata,hmc);

    THStack* hstack = new THStack("hstack"+TString(label), "hstack"+TString(label));
    //hstack->Add(hupsilon);
    hstack->Add(hWleptonnu);
    hstack->Add(hDibosons);
    hstack->Add(httbar);
    hstack->Add(hZtautau);
    hstack->Add(hqcd);
    hstack->Add(hsignal);

    TCanvas *c1 = new TCanvas(TString(h)+TString(label), TString(h)+TString(label), 800, 840);
    c1->Draw();
    //TPad *p1 = new TPad("p1", "",0.0,0.25,1.0,1.0,0,0,0);
    //p1->Draw();
    //p1->cd();
    //p1->SetBottomMargin(0.01);
    c1->cd();
    c1->SetLogy();
    //c1->SetLogx();

    hstack->SetMaximum(2.0*hdata->GetMaximum());
    hstack->SetMinimum(1.0*10E-2);
    //hstack->SetTitle("CMS at 7TeV, Lumi = "+TString(lumiLabel)+" pb^{-1}");
    hstack->Draw("");
    hstack->GetXaxis()->SetMoreLogLabels();
    if (TString(h) == "absrap") hstack->GetXaxis()->SetTitle("|Y|");
    if (TString(h) == "iso")  hstack->GetXaxis()->SetTitle("Rel Comb PF Iso No EGamma");
    hstack->GetYaxis()->SetTitle("Number of Events");
    hstack->Draw("");

    THStack* hstack2 = new THStack("stack2"+TString(label),"stack2"+TString(label));
    //hupsilon->SetMarkerSize(0);
    httbar->SetMarkerSize(0);
    hWleptonnu->SetMarkerSize(0);
    hZtautau->SetMarkerSize(0);
    hqcd->SetMarkerSize(0);
    hsignal->SetMarkerSize(0);
    hDibosons->SetMarkerSize(0);
    //hstack2->Add(hupsilon);
    hstack2->Add(httbar);
    hstack2->Add(hWleptonnu);
    hstack2->Add(hDibosons);
    hstack2->Add(hZtautau);
    hstack2->Add(hqcd);
    hstack2->Add(hsignal);
    hstack2->Draw("Esame");

    hdata->SetMarkerStyle(20);
    hdata->GetXaxis()->SetMoreLogLabels();
//    hdata->Draw("epsame");
    hdata->Draw("pesame");

    TPaveText *pt = new TPaveText(0.30,0.75,0.45,0.90,"brNDC");
    pt->SetFillColor(0);
//   pt->SetTextFont(72);
    pt->SetTextSize(0.040);
    pt->SetBorderSize(0);
    pt->SetTextAlign(12);
    pt->AddText("CMS Preliminary, #intLdt = 15 pb^{-1}");

/*
    gStyle->SetOptTitle(0);
    TPad *p2 = new TPad("p2", "",0.0,0.0,1.0,0.24,0,0,0);
    c1->cd();
    p2->Draw();
    p2->cd();
    p2->SetLogx();
    p2->SetTopMargin(0.007);
    p2->SetBottomMargin(0.35);
    p2->SetTickx();
    hratio->GetYaxis()->SetTitle("R_{Data/MC}");
    hratio->SetStats(kFALSE);
    hratio->GetYaxis()->SetTitleOffset(0.29);
    hratio->GetXaxis()->SetTitle("M_{#mu#mu} [GeV]");
    hratio->GetYaxis()->SetTitleSize(0.15);
    hratio->GetXaxis()->SetTitleSize(0.15);
    hratio->GetYaxis()->SetLabelSize(0.10);
    hratio->GetXaxis()->SetLabelSize(0.15);
    hratio->SetMarkerSize(1.3);
    hratio->SetMaximum(3.0);
    hratio->SetMinimum(-0.5);
    hratio->SetMarkerStyle(20);
    hratio->Draw("ep");
*/

    //add to stack
    TH1D* hstack4fit = (TH1D*)hsignal->Clone();
    //hstack->Add(hupsilon);
    hstack4fit->Add(hWleptonnu);
    hstack4fit->Add(hDibosons);
    hstack4fit->Add(httbar);
    hstack4fit->Add(hZtautau);
    hstack4fit->Add(hqcd);

//save important histograms
    TFile* f = new TFile("stack4fit_analyse"+TString(h)+TString(label)+".root","recreate");
    f->cd();
    hstack4fit->SetName("stack4fit");
    hstack4fit->Write();
    hsignal->SetName("signal");
    hsignal->Write();
    hqcd->SetName("qcd");
    hqcd->Write();
    hZtautau->SetName("Ztautau");
    hZtautau->Write();
    hWleptonnu->SetName("Wleptonnu");
    hWleptonnu->Write();
    hDibosons->SetName("dibosons");
    hDibosons->Write();
    httbar->SetName("ttbar");
    httbar->Write();
    hdata->SetName("data");
    hdata->Write();
    hratio->SetName("ratio");
    hratio->Write();
    f->Close();

    ostringstream tmpstrm;
    TLegend *legend = new TLegend(0.75, 0.60, 0.93, 0.90);
    tmpstrm.str("");
    tmpstrm << "DATA   " << hdata->Integral();
    legend->AddEntry(hdata, tmpstrm.str().c_str(), "PL");
    tmpstrm.str("");
    tmpstrm << "DY#rightarrow#mu#mu   " << Round(hsignal->Integral());
    legend->AddEntry(hsignal, tmpstrm.str().c_str(), "F");
    tmpstrm.str("");
    tmpstrm << "QCD#rightarrow#mu+X   " << Round(hqcd->Integral());
    legend->AddEntry(hqcd, tmpstrm.str().c_str(), "F");
    tmpstrm.str("");
    tmpstrm << "Z#rightarrow#tau#tau   " << Round(hZtautau->Integral());
    legend->AddEntry(hZtautau, tmpstrm.str().c_str(), "F");
    tmpstrm.str("");
    tmpstrm << "t#bar{t}   " << Round(httbar->Integral());
    legend->AddEntry(httbar, tmpstrm.str().c_str(), "F");
    tmpstrm.str("");
    tmpstrm << "W#rightarrow l#nu   " << Round(hWleptonnu->Integral());
    legend->AddEntry(hWleptonnu, tmpstrm.str().c_str(), "F");
    tmpstrm.str("");
    tmpstrm << "Dibosons   " << Round(hDibosons->Integral());
    legend->AddEntry(hDibosons, tmpstrm.str().c_str(), "F");
    tmpstrm.str("");
//    tmpstrm << "Upsilon" << Round(hupsilon->Integral());
//    legend->AddEntry(hupsilon, tmpstrm.str().c_str(), "F");
//    tmpstrm.str("");

    legend->SetFillColor(0);
    legend->Draw("0");

    c1->Print(TString(h)+TString(label)+".pdf");

  }//end edges loop
}

double Round(double d) {
    double nd = (double) floor(d*10.)/10.;
    return nd;
}

void FindRatio(TH1D* ratio, TH1D* numer, TH1D* denom) {
   for (int ibin = 0; ibin < numer->GetXaxis()->GetNbins()+1;ibin++) {
       if (denom->GetBinContent(ibin+1) != 0) {
                double rat = (double)(numer->GetBinContent(ibin+1)/denom->GetBinContent(ibin+1));
                ratio->SetBinContent(ibin+1,rat);
                ratio->SetBinError(ibin+1,sqrt(numer->GetBinContent(ibin+1))/denom->GetBinContent(ibin+1) - numer->GetBinContent(ibin+1)*sqrt(denom->GetBinContent(ibin+1))/pow(denom->GetBinContent(ibin+1),2));
        } else {
                ratio->SetBinContent(ibin+1,0.);
       }
  }
}
